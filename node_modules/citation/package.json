{
  "name": "citation",
  "author": {
    "name": "Eric Mill"
  },
  "description": "Legal citation extractor. Standalone library, and optional HTTP API.",
  "version": "0.6.2",
  "license": "unlicense",
  "keywords": [
    "congress",
    "laws",
    "legal",
    "citations",
    "us code",
    "regulations"
  ],
  "repository": {
    "type": "git",
    "url": "https://github.com/unitedstates/citation"
  },
  "bin": {
    "cite": "./bin/cite",
    "cite-server": "./bin/cite-server"
  },
  "scripts": {
    "test": "nodeunit test"
  },
  "dependencies": {
    "underscore": "*",
    "xregexp": "*",
    "express": "3.x",
    "reloader": "*",
    "optimist": "*"
  },
  "devDependencies": {
    "nodeunit": "*"
  },
  "engines": {
    "node": ">=0.6"
  },
  "main": "./citation.js",
  "readme": "# Citation\n\nA fast, stand-alone legal citation extractor.\n\nCurrently supports: \n\n* US Code\n* US Public and Private Laws (slip laws)\n* US Statutes at Large\n* DC Code\n* DC Register\n\n## Install\n\n[Install Node.js and NPM](http://nodejs.org/#download), then install Citation globally (may require `sudo`):\n\n```bash\nnpm install -g citation\n```\n\nOr install it locally to a `node_modules` directory with `npm install citation`.\n\n## Use\n\nCitation can handle blocks of text, large or small, through the command line, HTTP, or directly in JavaScript.\n\nVia the command line:\n\n```bash\ncite \"pursuant to 5 U.S.C. 552(a)(1)(E) and\"\n```\n\nCalling from JavaScript directly:\n\n```javascript\nCitation.find(\"pursuant to 5 U.S.C. 552(a)(1)(E) and\")\n```\n\nOr through the included HTTP API:\n\n```bash\ncite-server\ncurl \"http://localhost:3000/citation/find?text=pursuant+to+5+U.S.C.+552%28a%29%281%29%28E%29+and\"\n```\n\nAll of which yield:\n\n```json\n[{\n  \"match\": \"5 U.S.C. 552(a)(1)(E)\",\n  \"type\": \"usc\",\n  \"index\": \"0\",\n  \"usc\": {\n    \"title\": \"5\",\n    \"section\": \"552\",\n    \"subsections\": [\"a\", \"1\", \"E\"],\n    \"id\": \"usc/5/552/a/1/E\",\n    \"section_id\": \"usc/5/552\"\n  }\n}]\n```\n\n(The HTTP API actually returns a JavaScript object with a key of `results` whose value is the above array.)\n\n### Excerpts\n\nPassing an `excerpt` option will include an excerpt in the response, with up to that number of characters on either side of each detected citation.\n\n```javascript\nCitation.find(\"that term in section 5362(5) of title 31, United States Code.\", {excerpt: 10})\n```\n\nYields:\n\n```json\n[{\n  \"match\": \"section 5362(5) of title 31\",\n  \"excerpt\": \"t term in section 5362(5) of title 31, United S\",\n  ...\n}]\n```\n\n\n## Command line\n\nThe shell command can accept a string to parse as an argument, through STDIN, or from a file. It can output results to STDOUT, or to a file.\n\n```bash\ncite \"section 5362(5) of title 31\"\n\necho \"section 5362(5) of title 31\" | cite\n\ncite --input=in-file.txt --output=out-file.json\n```\n\n### Options\n\n* `--input`: Filename to read text from\n* `--output`: Filename to output text to\n* `--pretty`: Prettify (indent) output\n* `--types`: Limit citation types to a comma-separated list (e.g. \"usc,law\")\n\n## HTTP API\n\nStart the API on a given port (defaults to 3000):\n\n```bash\ncite-server [port]\n```\n\nGET or POST to `/citation/find` with a `text` parameter:\n\n```bash    \ncurl http://localhost:3000/citation/find?text=5+U.S.C.+552%28a%29%281%29%28E%29\n\ncurl -XPOST \"http://localhost:3000/citation/find\" -d \"text=5 U.S.C. 552(a)(1)(E)\"\n```\n\nWill return the results of running Citation.find() on the block of text, under a `results` key:\n\n```json\n{\n  \"results\": [\n    {\n      \"match\": \"5 U.S.C. 552(a)(1)(E)\",\n      \"type\": \"usc\",\n      \"index\": \"0\",\n      \"usc\": {\n        \"title\": \"5\",\n        \"section\": \"552\",\n        \"subsections\": [\"a\", \"1\", \"E\"],\n        \"id\": \"usc/5/552/a/1/E\",\n        \"section_id\": \"usc/5/552\"\n      }\n    }\n  ]\n}\n```\n\n### Options\n\n* `text`: **required**, text to extract citations from.\n* `callback`: a function name to use as a JSONP callback.\n* `pretty`: prettify (indent) output.\n* `options[excerpt]`: include excerpts with up to this many characters around it.\n* `options[types]`: limit citation types to a comma-separated list (e.g. \"usc,law\")\n\n\n## Context-aware citation detection\n\nIn the JavaScript interface, you can pass optional `context`, an object with arbitrary key/value pairs, that can tell the citator what you already know about the source text, and potentially allow more permissive detection.\n\nFor example, most DC legal documents use the prefix \"D.C. Official Code\" before they cite the DC Code. But cross-references inside the DC Code to other parts of the DC Code do not include this prefix. If you know that your source text is the DC Code, you can detect cross-references by providing a `source` value of \"dc_code\":\n\n```javascript\nCitation.find(\"required under ยง 3-101.01(13)(e), the Commission shall perform the\", {\n  context: {\n    dc_code: {source: \"dc_code\"}\n  }\n})\n```\n\nYields:\n\n```json\n[\n  {\n    \"type\": \"dc_code\",\n    \"match\": \"ยง 3-101.01(13)(e)\",\n    \"index\": 15,\n\n    \"dc_code\": {\n      \"id\": \"dc-code/3/101.01/13/e\",\n      \"section_id\": \"dc-code/3/101.01\",\n      \"title\": \"3\",\n      \"section\": \"101.01\",\n      \"subsections\": [\"13\", \"e\"]\n    }\n  }\n]\n```\n\n\n## About\n\nOriginally written by [Eric Mill](http://twitter.com/konklone), at the [Sunlight Foundation](http://sunlightfoundation.com).\n",
  "readmeFilename": "README.md",
  "_id": "citation@0.6.2",
  "dist": {
    "shasum": "74e91addbd19c9a1f417b0287fe28f106132e1d7"
  },
  "_from": "citation@~0.6.2",
  "_resolved": "https://registry.npmjs.org/citation/-/citation-0.6.2.tgz"
}
